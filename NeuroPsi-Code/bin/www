#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('neuropsi-code:server');
var http = require('http');
var users = []
var pool = require('../models/connection')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


io.on('connection', (socket) => {
  socket.on("user_connected", (user) => {
    users['user-'+user] = socket.id

    io.emit("user_connected", user)
  });

  socket.on("send_message", async (data) => {
    var socketId = users['user-'+data.receiver];
    let name = await pool.query('SELECT name_User FROM User WHERE ID_User = ?', [data.sender])
    let initial = name[0].name_User.split(' ')[0].charAt(0) + ' ' + name[0].name_User.split(' ')[1].charAt(0)
    data.initial = initial
    io.to(socketId).emit("new_message", data);
    await pool.query('INSERT INTO Message (Receiver_ID_Message,Sender_ID_Message, Content_Message) VALUES (?,?,?)',[data.receiver, data.sender, data.message])
  });
})
